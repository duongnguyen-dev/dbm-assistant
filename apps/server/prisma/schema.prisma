// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Feedback {
  SATISFIED
  UNSATISFIED
}

model User {
  id Int @id @default(autoincrement())
  username String?
  hashedPassword String
  salted String
  email String @unique
  role Role
  chatConversation ChatConversation[]
  db Database?
}

model Database {
  id Int @id @default(autoincrement())
  host String
  port String
  username String
  password String
  database String
  userId Int @unique
  user User @relation(fields: [userId], references: [id])

  embedId Int
  embed EmbedModel @relation(fields: [embedId], references: [id])
}

model EmbedModel {
  id Int @id @default(autoincrement())
  url String
  name String

  database Database[]
}

model ChatConversation {
  id Int @id @default(autoincrement())
  createdDate DateTime
  conversationSummary String
  chatMessageId ChatMessage[]
  userId Int

  user User @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id Int @id @default(autoincrement())
  createdDate DateTime
  content Json
  feedback Feedback
  chatConversationId Int
  chatConversation ChatConversation @relation(fields: [chatConversationId], references: [id])

  llmModelId Int
  llmModel LLMModel @relation(fields: [llmModelId], references: [id])
}

model LLMModel {
  id Int @id @default(autoincrement())
  url String
  name String

  chatMessage ChatMessage[]
}